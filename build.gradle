plugins {
    id 'java'
    id 'com.github.spotbugs' version '4.5.0' apply false
    id 'me.champeau.gradle.jmh' version '0.5.2' apply false
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

dependencies {
    implementation 'org.openjdk.jmh:jmh-core:1.25'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

test {
    useJUnitPlatform()
}

allprojects {
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'

    pmd {
        consoleOutput = true
        ruleSets = []
        ruleSetFiles = files("${project.rootDir}/config/pmd/config.xml")
    }

    tasks.matching {task -> task.name.startsWith('spotbugs')}.forEach {
        it.reports {
            html.enabled = true
            xml.enabled = false
        }
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        compileOnly rootProject
        testImplementation rootProject

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    }

    test {
        useJUnitPlatform()
    }

    jmh {
        warmupIterations = 2
        iterations = 5
        benchmarkMode = ['thrpt']
        fork = 5
        failOnError = true
        operationsPerInvocation = 1
        resultFormat = 'CSV'
    }

    project.afterEvaluate {
        tasks.register("depsize") {
            listConfigurationDependencies(project.name, project.buildDir, configurations.runtimeClasspath)
        }
    }
}

def listConfigurationDependencies(String projectName, File buildDir, Configuration configuration) {
    def formatStr = "%,10.2f"

    def size = configuration.collect { it.length() }.sum() / 1024

    def reportFile = file("${buildDir}/tmp/deps.txt")
    mkdir reportFile.parentFile

    def out = new StringBuilder()
    if (size) {
        reportFile.write("$projectName,${Math.round(size)}\n")
        out << 'Total dependencies size:'.padRight(64)
        out << "${String.format(formatStr, size)} KiB\n\n"

        configuration.sort { -it.length() }
                .each {
                    out << "${it.name}".padRight(64)
                    out << "${String.format(formatStr, (it.length() / 1024))} KiB\n"
                }
    } else {
        out << 'No dependencies found';
    }
    out << "------------------------------------------------------------------------------\n"
    println(out)
}
